
//01
def knapSack(W, wt, val, n): 
    if n == 0 or W == 0: 
        return 0

    if (wt[n-1] > W): 
        return knapSack(W, wt, val, n-1) 
    else: 
        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)) 

if __name__ == '__main__': 
    n = int(input("Enter the number of items: "))
    profit = []
    weight = []
    for i in range(n):
        p = int(input(f"Enter profit for item {i+1}: "))
        w = int(input(f"Enter weight for item {i+1}: "))
        profit.append(p)



//Fractional
class Item:
    def __init__(self, profit, weight):
        self.profit = profit
        self.weight = weight

def fractionalKnapsack(W, arr):
    arr.sort(key=lambda x: (x.profit/x.weight), reverse=True) 
    finalvalue = 0.0
    for item in arr:
        if item.weight <= W:
            W -= item.weight
            finalvalue += item.profit
        else:
            finalvalue += item.profit * W / item.weight
            break
    return finalvalue

if __name__ == "__main__":
    W = int(input("Enter the capacity of the knapsack: "))

    num_items = int(input("Enter the number of items: "))
    arr = []

    for i in range(num_items):
        profit = int(input(f"Enter profit for item {i+1}: "))
        weight = int(input(f"Enter weight for item {i+1}: "))
        arr.append(Item(profit, weight))

    max_val = fractionalKnapsack(W, arr)
    print(f"Maximum value in Knapsack = {max_val}")
